package com.ordbok.mybatis.client;

import com.ordbok.mybatis.model.Ord;
import com.ordbok.mybatis.model.OrdExample.Criteria;
import com.ordbok.mybatis.model.OrdExample.Criterion;
import com.ordbok.mybatis.model.OrdExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class OrdSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	public String countByExample(OrdExample example) {
		SQL sql = new SQL();
		sql.SELECT("count(*)").FROM("ord");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	public String deleteByExample(OrdExample example) {
		SQL sql = new SQL();
		sql.DELETE_FROM("ord");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	public String insertSelective(Ord record) {
		SQL sql = new SQL();
		sql.INSERT_INTO("ord");
		if (record.getOrd() != null) {
			sql.VALUES("ord", "#{ord,jdbcType=VARCHAR}");
		}
		if (record.getPartofspeech() != null) {
			sql.VALUES("partofspeech", "#{partofspeech,jdbcType=VARCHAR}");
		}
		if (record.getSingularIndefinite() != null) {
			sql.VALUES("singular_indefinite", "#{singularIndefinite,jdbcType=VARCHAR}");
		}
		if (record.getSingularDefinite() != null) {
			sql.VALUES("singular_definite", "#{singularDefinite,jdbcType=VARCHAR}");
		}
		if (record.getPluralIndefinite() != null) {
			sql.VALUES("plural_indefinite", "#{pluralIndefinite,jdbcType=VARCHAR}");
		}
		if (record.getPluralDefinite() != null) {
			sql.VALUES("plural_definite", "#{pluralDefinite,jdbcType=VARCHAR}");
		}
		if (record.getImperative() != null) {
			sql.VALUES("imperative", "#{imperative,jdbcType=VARCHAR}");
		}
		if (record.getInfinitive() != null) {
			sql.VALUES("infinitive", "#{infinitive,jdbcType=VARCHAR}");
		}
		if (record.getPresent() != null) {
			sql.VALUES("present", "#{present,jdbcType=VARCHAR}");
		}
		if (record.getPast() != null) {
			sql.VALUES("past", "#{past,jdbcType=VARCHAR}");
		}
		if (record.getSupine() != null) {
			sql.VALUES("supine", "#{supine,jdbcType=VARCHAR}");
		}
		if (record.getPositive() != null) {
			sql.VALUES("positive", "#{positive,jdbcType=VARCHAR}");
		}
		if (record.getComparative() != null) {
			sql.VALUES("comparative", "#{comparative,jdbcType=VARCHAR}");
		}
		if (record.getSuperlative() != null) {
			sql.VALUES("superlative", "#{superlative,jdbcType=VARCHAR}");
		}
		if (record.getMeaning() != null) {
			sql.VALUES("meaning", "#{meaning,jdbcType=VARCHAR}");
		}
		if (record.getExample() != null) {
			sql.VALUES("example", "#{example,jdbcType=VARCHAR}");
		}
		if (record.getPrefix() != null) {
			sql.VALUES("prefix", "#{prefix,jdbcType=VARCHAR}");
		}
		if (record.getSuffix() != null) {
			sql.VALUES("suffix", "#{suffix,jdbcType=VARCHAR}");
		}
		if (record.getCompound() != null) {
			sql.VALUES("compound", "#{compound,jdbcType=VARCHAR}");
		}
		if (record.getCategory() != null) {
			sql.VALUES("category", "#{category,jdbcType=VARCHAR}");
		}
		if (record.getRelatedword() != null) {
			sql.VALUES("relatedword", "#{relatedword,jdbcType=VARCHAR}");
		}
		if (record.getSynonym() != null) {
			sql.VALUES("synonym", "#{synonym,jdbcType=VARCHAR}");
		}
		if (record.getAntonym() != null) {
			sql.VALUES("antonym", "#{antonym,jdbcType=VARCHAR}");
		}
		if (record.getNote() != null) {
			sql.VALUES("note", "#{note,jdbcType=VARCHAR}");
		}
		if (record.getCreatedDate() != null) {
			sql.VALUES("created_date", "#{createdDate,jdbcType=DATE}");
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	public String selectByExample(OrdExample example) {
		SQL sql = new SQL();
		if (example != null && example.isDistinct()) {
			sql.SELECT_DISTINCT("ord");
		} else {
			sql.SELECT("ord");
		}
		sql.SELECT("partofspeech");
		sql.SELECT("singular_indefinite");
		sql.SELECT("singular_definite");
		sql.SELECT("plural_indefinite");
		sql.SELECT("plural_definite");
		sql.SELECT("imperative");
		sql.SELECT("infinitive");
		sql.SELECT("present");
		sql.SELECT("past");
		sql.SELECT("supine");
		sql.SELECT("positive");
		sql.SELECT("comparative");
		sql.SELECT("superlative");
		sql.SELECT("meaning");
		sql.SELECT("example");
		sql.SELECT("prefix");
		sql.SELECT("suffix");
		sql.SELECT("compound");
		sql.SELECT("category");
		sql.SELECT("relatedword");
		sql.SELECT("synonym");
		sql.SELECT("antonym");
		sql.SELECT("note");
		sql.SELECT("created_date");
		sql.FROM("ord");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null) {
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		Ord record = (Ord) parameter.get("record");
		OrdExample example = (OrdExample) parameter.get("example");
		SQL sql = new SQL();
		sql.UPDATE("ord");
		if (record.getOrd() != null) {
			sql.SET("ord = #{record.ord,jdbcType=VARCHAR}");
		}
		if (record.getPartofspeech() != null) {
			sql.SET("partofspeech = #{record.partofspeech,jdbcType=VARCHAR}");
		}
		if (record.getSingularIndefinite() != null) {
			sql.SET("singular_indefinite = #{record.singularIndefinite,jdbcType=VARCHAR}");
		}
		if (record.getSingularDefinite() != null) {
			sql.SET("singular_definite = #{record.singularDefinite,jdbcType=VARCHAR}");
		}
		if (record.getPluralIndefinite() != null) {
			sql.SET("plural_indefinite = #{record.pluralIndefinite,jdbcType=VARCHAR}");
		}
		if (record.getPluralDefinite() != null) {
			sql.SET("plural_definite = #{record.pluralDefinite,jdbcType=VARCHAR}");
		}
		if (record.getImperative() != null) {
			sql.SET("imperative = #{record.imperative,jdbcType=VARCHAR}");
		}
		if (record.getInfinitive() != null) {
			sql.SET("infinitive = #{record.infinitive,jdbcType=VARCHAR}");
		}
		if (record.getPresent() != null) {
			sql.SET("present = #{record.present,jdbcType=VARCHAR}");
		}
		if (record.getPast() != null) {
			sql.SET("past = #{record.past,jdbcType=VARCHAR}");
		}
		if (record.getSupine() != null) {
			sql.SET("supine = #{record.supine,jdbcType=VARCHAR}");
		}
		if (record.getPositive() != null) {
			sql.SET("positive = #{record.positive,jdbcType=VARCHAR}");
		}
		if (record.getComparative() != null) {
			sql.SET("comparative = #{record.comparative,jdbcType=VARCHAR}");
		}
		if (record.getSuperlative() != null) {
			sql.SET("superlative = #{record.superlative,jdbcType=VARCHAR}");
		}
		if (record.getMeaning() != null) {
			sql.SET("meaning = #{record.meaning,jdbcType=VARCHAR}");
		}
		if (record.getExample() != null) {
			sql.SET("example = #{record.example,jdbcType=VARCHAR}");
		}
		if (record.getPrefix() != null) {
			sql.SET("prefix = #{record.prefix,jdbcType=VARCHAR}");
		}
		if (record.getSuffix() != null) {
			sql.SET("suffix = #{record.suffix,jdbcType=VARCHAR}");
		}
		if (record.getCompound() != null) {
			sql.SET("compound = #{record.compound,jdbcType=VARCHAR}");
		}
		if (record.getCategory() != null) {
			sql.SET("category = #{record.category,jdbcType=VARCHAR}");
		}
		if (record.getRelatedword() != null) {
			sql.SET("relatedword = #{record.relatedword,jdbcType=VARCHAR}");
		}
		if (record.getSynonym() != null) {
			sql.SET("synonym = #{record.synonym,jdbcType=VARCHAR}");
		}
		if (record.getAntonym() != null) {
			sql.SET("antonym = #{record.antonym,jdbcType=VARCHAR}");
		}
		if (record.getNote() != null) {
			sql.SET("note = #{record.note,jdbcType=VARCHAR}");
		}
		if (record.getCreatedDate() != null) {
			sql.SET("created_date = #{record.createdDate,jdbcType=DATE}");
		}
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	public String updateByExample(Map<String, Object> parameter) {
		SQL sql = new SQL();
		sql.UPDATE("ord");
		sql.SET("ord = #{record.ord,jdbcType=VARCHAR}");
		sql.SET("partofspeech = #{record.partofspeech,jdbcType=VARCHAR}");
		sql.SET("singular_indefinite = #{record.singularIndefinite,jdbcType=VARCHAR}");
		sql.SET("singular_definite = #{record.singularDefinite,jdbcType=VARCHAR}");
		sql.SET("plural_indefinite = #{record.pluralIndefinite,jdbcType=VARCHAR}");
		sql.SET("plural_definite = #{record.pluralDefinite,jdbcType=VARCHAR}");
		sql.SET("imperative = #{record.imperative,jdbcType=VARCHAR}");
		sql.SET("infinitive = #{record.infinitive,jdbcType=VARCHAR}");
		sql.SET("present = #{record.present,jdbcType=VARCHAR}");
		sql.SET("past = #{record.past,jdbcType=VARCHAR}");
		sql.SET("supine = #{record.supine,jdbcType=VARCHAR}");
		sql.SET("positive = #{record.positive,jdbcType=VARCHAR}");
		sql.SET("comparative = #{record.comparative,jdbcType=VARCHAR}");
		sql.SET("superlative = #{record.superlative,jdbcType=VARCHAR}");
		sql.SET("meaning = #{record.meaning,jdbcType=VARCHAR}");
		sql.SET("example = #{record.example,jdbcType=VARCHAR}");
		sql.SET("prefix = #{record.prefix,jdbcType=VARCHAR}");
		sql.SET("suffix = #{record.suffix,jdbcType=VARCHAR}");
		sql.SET("compound = #{record.compound,jdbcType=VARCHAR}");
		sql.SET("category = #{record.category,jdbcType=VARCHAR}");
		sql.SET("relatedword = #{record.relatedword,jdbcType=VARCHAR}");
		sql.SET("synonym = #{record.synonym,jdbcType=VARCHAR}");
		sql.SET("antonym = #{record.antonym,jdbcType=VARCHAR}");
		sql.SET("note = #{record.note,jdbcType=VARCHAR}");
		sql.SET("created_date = #{record.createdDate,jdbcType=DATE}");
		OrdExample example = (OrdExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	public String updateByPrimaryKeySelective(Ord record) {
		SQL sql = new SQL();
		sql.UPDATE("ord");
		if (record.getSingularIndefinite() != null) {
			sql.SET("singular_indefinite = #{singularIndefinite,jdbcType=VARCHAR}");
		}
		if (record.getSingularDefinite() != null) {
			sql.SET("singular_definite = #{singularDefinite,jdbcType=VARCHAR}");
		}
		if (record.getPluralIndefinite() != null) {
			sql.SET("plural_indefinite = #{pluralIndefinite,jdbcType=VARCHAR}");
		}
		if (record.getPluralDefinite() != null) {
			sql.SET("plural_definite = #{pluralDefinite,jdbcType=VARCHAR}");
		}
		if (record.getImperative() != null) {
			sql.SET("imperative = #{imperative,jdbcType=VARCHAR}");
		}
		if (record.getInfinitive() != null) {
			sql.SET("infinitive = #{infinitive,jdbcType=VARCHAR}");
		}
		if (record.getPresent() != null) {
			sql.SET("present = #{present,jdbcType=VARCHAR}");
		}
		if (record.getPast() != null) {
			sql.SET("past = #{past,jdbcType=VARCHAR}");
		}
		if (record.getSupine() != null) {
			sql.SET("supine = #{supine,jdbcType=VARCHAR}");
		}
		if (record.getPositive() != null) {
			sql.SET("positive = #{positive,jdbcType=VARCHAR}");
		}
		if (record.getComparative() != null) {
			sql.SET("comparative = #{comparative,jdbcType=VARCHAR}");
		}
		if (record.getSuperlative() != null) {
			sql.SET("superlative = #{superlative,jdbcType=VARCHAR}");
		}
		if (record.getMeaning() != null) {
			sql.SET("meaning = #{meaning,jdbcType=VARCHAR}");
		}
		if (record.getExample() != null) {
			sql.SET("example = #{example,jdbcType=VARCHAR}");
		}
		if (record.getPrefix() != null) {
			sql.SET("prefix = #{prefix,jdbcType=VARCHAR}");
		}
		if (record.getSuffix() != null) {
			sql.SET("suffix = #{suffix,jdbcType=VARCHAR}");
		}
		if (record.getCompound() != null) {
			sql.SET("compound = #{compound,jdbcType=VARCHAR}");
		}
		if (record.getCategory() != null) {
			sql.SET("category = #{category,jdbcType=VARCHAR}");
		}
		if (record.getRelatedword() != null) {
			sql.SET("relatedword = #{relatedword,jdbcType=VARCHAR}");
		}
		if (record.getSynonym() != null) {
			sql.SET("synonym = #{synonym,jdbcType=VARCHAR}");
		}
		if (record.getAntonym() != null) {
			sql.SET("antonym = #{antonym,jdbcType=VARCHAR}");
		}
		if (record.getNote() != null) {
			sql.SET("note = #{note,jdbcType=VARCHAR}");
		}
		if (record.getCreatedDate() != null) {
			sql.SET("created_date = #{createdDate,jdbcType=DATE}");
		}
		sql.WHERE("ord = #{ord,jdbcType=VARCHAR}");
		sql.WHERE("partofspeech = #{partofspeech,jdbcType=VARCHAR}");
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	protected void applyWhere(SQL sql, OrdExample example, boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}
		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}
		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}
				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}
					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}
		if (sb.length() > 0) {
			sql.WHERE(sb.toString());
		}
	}
	
	public String getPrefix() {
        SQL sql = new SQL();
        sql.SELECT("distinct prefix").FROM("ord");
        sql.WHERE("prefix!=''");
        return sql.toString();
    }
	
	public String getSuffix() {
        SQL sql = new SQL();
        sql.SELECT("distinct suffix").FROM("ord");
        sql.WHERE("suffix!=''");
        return sql.toString();
    }
	
	public String getCategory() {
        SQL sql = new SQL();
        sql.SELECT("distinct category").FROM("ord");
        sql.WHERE("category!=''");
        return sql.toString();
    }
}