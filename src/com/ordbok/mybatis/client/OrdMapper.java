package com.ordbok.mybatis.client;

import com.ordbok.mybatis.model.Ord;
import com.ordbok.mybatis.model.OrdExample;
import com.ordbok.mybatis.model.OrdKey;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface OrdMapper {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	@SelectProvider(type = OrdSqlProvider.class, method = "countByExample")
	long countByExample(OrdExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	@DeleteProvider(type = OrdSqlProvider.class, method = "deleteByExample")
	int deleteByExample(OrdExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	@Delete({ "delete from ord", "where ord = #{ord,jdbcType=VARCHAR}",
			"and partofspeech = #{partofspeech,jdbcType=VARCHAR}" })
	int deleteByPrimaryKey(OrdKey key);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	@Insert({ "insert into ord (ord, partofspeech, ", "singular_indefinite, singular_definite, ",
			"plural_indefinite, plural_definite, ", "imperative, infinitive, ", "present, past, supine, ",
			"positive, comparative, ", "superlative, meaning, ", "example, prefix, ", "suffix, compound, ",
			"category, relatedword, ", "synonym, antonym, ", "note, created_date)",
			"values (#{ord,jdbcType=VARCHAR}, #{partofspeech,jdbcType=VARCHAR}, ",
			"#{singularIndefinite,jdbcType=VARCHAR}, #{singularDefinite,jdbcType=VARCHAR}, ",
			"#{pluralIndefinite,jdbcType=VARCHAR}, #{pluralDefinite,jdbcType=VARCHAR}, ",
			"#{imperative,jdbcType=VARCHAR}, #{infinitive,jdbcType=VARCHAR}, ",
			"#{present,jdbcType=VARCHAR}, #{past,jdbcType=VARCHAR}, #{supine,jdbcType=VARCHAR}, ",
			"#{positive,jdbcType=VARCHAR}, #{comparative,jdbcType=VARCHAR}, ",
			"#{superlative,jdbcType=VARCHAR}, #{meaning,jdbcType=VARCHAR}, ",
			"#{example,jdbcType=VARCHAR}, #{prefix,jdbcType=VARCHAR}, ",
			"#{suffix,jdbcType=VARCHAR}, #{compound,jdbcType=VARCHAR}, ",
			"#{category,jdbcType=VARCHAR}, #{relatedword,jdbcType=VARCHAR}, ",
			"#{synonym,jdbcType=VARCHAR}, #{antonym,jdbcType=VARCHAR}, ",
			"#{note,jdbcType=VARCHAR}, #{createdDate,jdbcType=DATE})" })
	int insert(Ord record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	@InsertProvider(type = OrdSqlProvider.class, method = "insertSelective")
	int insertSelective(Ord record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	@SelectProvider(type = OrdSqlProvider.class, method = "selectByExample")
	@Results({ @Result(column = "ord", property = "ord", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "partofspeech", property = "partofspeech", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "singular_indefinite", property = "singularIndefinite", jdbcType = JdbcType.VARCHAR),
			@Result(column = "singular_definite", property = "singularDefinite", jdbcType = JdbcType.VARCHAR),
			@Result(column = "plural_indefinite", property = "pluralIndefinite", jdbcType = JdbcType.VARCHAR),
			@Result(column = "plural_definite", property = "pluralDefinite", jdbcType = JdbcType.VARCHAR),
			@Result(column = "imperative", property = "imperative", jdbcType = JdbcType.VARCHAR),
			@Result(column = "infinitive", property = "infinitive", jdbcType = JdbcType.VARCHAR),
			@Result(column = "present", property = "present", jdbcType = JdbcType.VARCHAR),
			@Result(column = "past", property = "past", jdbcType = JdbcType.VARCHAR),
			@Result(column = "supine", property = "supine", jdbcType = JdbcType.VARCHAR),
			@Result(column = "positive", property = "positive", jdbcType = JdbcType.VARCHAR),
			@Result(column = "comparative", property = "comparative", jdbcType = JdbcType.VARCHAR),
			@Result(column = "superlative", property = "superlative", jdbcType = JdbcType.VARCHAR),
			@Result(column = "meaning", property = "meaning", jdbcType = JdbcType.VARCHAR),
			@Result(column = "example", property = "example", jdbcType = JdbcType.VARCHAR),
			@Result(column = "prefix", property = "prefix", jdbcType = JdbcType.VARCHAR),
			@Result(column = "suffix", property = "suffix", jdbcType = JdbcType.VARCHAR),
			@Result(column = "compound", property = "compound", jdbcType = JdbcType.VARCHAR),
			@Result(column = "category", property = "category", jdbcType = JdbcType.VARCHAR),
			@Result(column = "relatedword", property = "relatedword", jdbcType = JdbcType.VARCHAR),
			@Result(column = "synonym", property = "synonym", jdbcType = JdbcType.VARCHAR),
			@Result(column = "antonym", property = "antonym", jdbcType = JdbcType.VARCHAR),
			@Result(column = "note", property = "note", jdbcType = JdbcType.VARCHAR),
			@Result(column = "created_date", property = "createdDate", jdbcType = JdbcType.DATE) })
	List<Ord> selectByExample(OrdExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	@Select({ "select", "ord, partofspeech, singular_indefinite, singular_definite, plural_indefinite, ",
			"plural_definite, imperative, infinitive, present, past, supine, positive, comparative, ",
			"superlative, meaning, example, prefix, suffix, compound, category, relatedword, ",
			"synonym, antonym, note, created_date", "from ord", "where ord = #{ord,jdbcType=VARCHAR}",
			"and partofspeech = #{partofspeech,jdbcType=VARCHAR}" })
	@Results({ @Result(column = "ord", property = "ord", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "partofspeech", property = "partofspeech", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "singular_indefinite", property = "singularIndefinite", jdbcType = JdbcType.VARCHAR),
			@Result(column = "singular_definite", property = "singularDefinite", jdbcType = JdbcType.VARCHAR),
			@Result(column = "plural_indefinite", property = "pluralIndefinite", jdbcType = JdbcType.VARCHAR),
			@Result(column = "plural_definite", property = "pluralDefinite", jdbcType = JdbcType.VARCHAR),
			@Result(column = "imperative", property = "imperative", jdbcType = JdbcType.VARCHAR),
			@Result(column = "infinitive", property = "infinitive", jdbcType = JdbcType.VARCHAR),
			@Result(column = "present", property = "present", jdbcType = JdbcType.VARCHAR),
			@Result(column = "past", property = "past", jdbcType = JdbcType.VARCHAR),
			@Result(column = "supine", property = "supine", jdbcType = JdbcType.VARCHAR),
			@Result(column = "positive", property = "positive", jdbcType = JdbcType.VARCHAR),
			@Result(column = "comparative", property = "comparative", jdbcType = JdbcType.VARCHAR),
			@Result(column = "superlative", property = "superlative", jdbcType = JdbcType.VARCHAR),
			@Result(column = "meaning", property = "meaning", jdbcType = JdbcType.VARCHAR),
			@Result(column = "example", property = "example", jdbcType = JdbcType.VARCHAR),
			@Result(column = "prefix", property = "prefix", jdbcType = JdbcType.VARCHAR),
			@Result(column = "suffix", property = "suffix", jdbcType = JdbcType.VARCHAR),
			@Result(column = "compound", property = "compound", jdbcType = JdbcType.VARCHAR),
			@Result(column = "category", property = "category", jdbcType = JdbcType.VARCHAR),
			@Result(column = "relatedword", property = "relatedword", jdbcType = JdbcType.VARCHAR),
			@Result(column = "synonym", property = "synonym", jdbcType = JdbcType.VARCHAR),
			@Result(column = "antonym", property = "antonym", jdbcType = JdbcType.VARCHAR),
			@Result(column = "note", property = "note", jdbcType = JdbcType.VARCHAR),
			@Result(column = "created_date", property = "createdDate", jdbcType = JdbcType.DATE) })
	Ord selectByPrimaryKey(OrdKey key);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	@UpdateProvider(type = OrdSqlProvider.class, method = "updateByExampleSelective")
	int updateByExampleSelective(@Param("record") Ord record, @Param("example") OrdExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	@UpdateProvider(type = OrdSqlProvider.class, method = "updateByExample")
	int updateByExample(@Param("record") Ord record, @Param("example") OrdExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	@UpdateProvider(type = OrdSqlProvider.class, method = "updateByPrimaryKeySelective")
	int updateByPrimaryKeySelective(Ord record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ord
	 * @mbg.generated  Wed Mar 13 13:00:02 HKT 2019
	 */
	@Update({ "update ord", "set singular_indefinite = #{singularIndefinite,jdbcType=VARCHAR},",
			"singular_definite = #{singularDefinite,jdbcType=VARCHAR},",
			"plural_indefinite = #{pluralIndefinite,jdbcType=VARCHAR},",
			"plural_definite = #{pluralDefinite,jdbcType=VARCHAR},", "imperative = #{imperative,jdbcType=VARCHAR},",
			"infinitive = #{infinitive,jdbcType=VARCHAR},", "present = #{present,jdbcType=VARCHAR},",
			"past = #{past,jdbcType=VARCHAR},", "supine = #{supine,jdbcType=VARCHAR},",
			"positive = #{positive,jdbcType=VARCHAR},", "comparative = #{comparative,jdbcType=VARCHAR},",
			"superlative = #{superlative,jdbcType=VARCHAR},", "meaning = #{meaning,jdbcType=VARCHAR},",
			"example = #{example,jdbcType=VARCHAR},", "prefix = #{prefix,jdbcType=VARCHAR},",
			"suffix = #{suffix,jdbcType=VARCHAR},", "compound = #{compound,jdbcType=VARCHAR},",
			"category = #{category,jdbcType=VARCHAR},", "relatedword = #{relatedword,jdbcType=VARCHAR},",
			"synonym = #{synonym,jdbcType=VARCHAR},", "antonym = #{antonym,jdbcType=VARCHAR},",
			"note = #{note,jdbcType=VARCHAR},", "created_date = #{createdDate,jdbcType=DATE}",
			"where ord = #{ord,jdbcType=VARCHAR}", "and partofspeech = #{partofspeech,jdbcType=VARCHAR}" })
	int updateByPrimaryKey(Ord record);
	
	
	//Added
	@Select("select distinct prefix from ord where prefix!='' ")
	@Results({ @Result(column = "prefix", property = "prefix", jdbcType = JdbcType.VARCHAR)})
	List<Ord> getPrefix();
	
	@Select("select distinct suffix from ord where suffix!='' ")
	@Results({ @Result(column = "suffix", property = "suffix", jdbcType = JdbcType.VARCHAR)})
	List<Ord> getSuffix();
	
	@Select("select distinct category from ord where category!='' ")
	@Results({ @Result(column = "category", property = "category", jdbcType = JdbcType.VARCHAR)})
	List<Ord> getCategory();
	
	@Select("select * from ord order by rand() limit 1")
	@Results({ @Result(column = "ord", property = "ord", jdbcType = JdbcType.VARCHAR, id = true),
		@Result(column = "meaning", property = "meaning", jdbcType = JdbcType.VARCHAR),
		@Result(column = "example", property = "example", jdbcType = JdbcType.VARCHAR) })
	List<Ord> getOrd();
}